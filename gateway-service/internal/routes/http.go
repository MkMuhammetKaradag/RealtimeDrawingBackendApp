// Package routes, API Gateway'in route tanÄ±mlamalarÄ±nÄ± iÃ§erir
package routes

import (
	"fmt"
	"gateway-service/internal/config"
	"gateway-service/internal/middleware"
	"gateway-service/utils"

	"github.com/gofiber/fiber/v2"
)

func RegisterHTTPRoutes(app *fiber.App, rateLimiter *middleware.RateLimiter) {

	// config.Services iÃ§indeki her servis iÃ§in bir route oluÅŸtur
	// prefix: Servis adÄ± (Ã¶rn: "auth", "chat" vb.)
	for prefix, _ := range config.Services {
		// Her servis iÃ§in bir proxy handler oluÅŸtur
		protectedPaths := config.ProtectedRoutes[prefix]

		for _, protectedPath := range protectedPaths {
			fullPath := fmt.Sprintf("/%s%s", prefix, protectedPath)
			fmt.Println("Registering protected route:", fullPath) // Debug iÃ§in
		}
		// ğŸ”¥ Burada tÃ¼m istekler iÃ§in service_name eklenmeli
		serviceGroup := app.Group("/"+prefix, middleware.ServiceName(prefix), rateLimiter.Middleware(), middleware.AuthGuard())
		// Gelen tÃ¼m HTTP isteklerini ilgili servise yÃ¶nlendir
		// utils.BuildProxyHandler kullanÄ±ldÄ±
		serviceGroup.All("/*", utils.BuildProxyHandler(prefix))
	}
}

// RegisterRoutes, tÃ¼m HTTP ve WebSocket rotalarÄ±nÄ± kaydeder.
func RegisterRoutes(app *fiber.App, rateLimiter *middleware.RateLimiter) {

	// HTTP servisleri iÃ§in rotalarÄ± kaydet
	for prefix, _ := range config.Services {
		// Her servise Ã¶zel bir middleware grubu oluÅŸtur
		// middleware.ServiceName ve rateLimiter.Middleware kullanÄ±ldÄ±
		serviceGroup := app.Group("/"+prefix, middleware.ServiceName(prefix), rateLimiter.Middleware(), middleware.AuthGuard())
		// Gelen tÃ¼m HTTP isteklerini ilgili servise yÃ¶nlendir
		// utils.BuildProxyHandler kullanÄ±ldÄ±
		serviceGroup.All("/*", utils.BuildProxyHandler(prefix))
	}

}
